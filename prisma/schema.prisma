// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
   url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  phone     String   @unique
  gender    Gender
  password  String
  role      Role
  profile   Profile?
  image     String? @default("http://hancockogundiyapartners.com/management/dummy-profile-pic-300x300/")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  STUDENT
  TUTOR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Booking {
  id            String        @id @default(cuid())
  studentId     String
  tutorId       String
  student       Profile       @relation("StudentBookings", fields: [studentId], references: [userId])
  tutor         Profile       @relation("TutorBookings", fields: [tutorId], references: [userId])
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  status        BookingStatus @default(PENDING)
  subject       String
  price         Float
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  fullName   String
  subject     String[]
  basePrice   Int?
  description String?
  ratings     Rating[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Article     Article[]
  isVerified Boolean @default(false)
  cv    String?
studentBookings Booking[] @relation("StudentBookings")
  tutorBookings   Booking[] @relation("TutorBookings")
  Rating Rating[] @relation(name: "tutor")
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    Profile  @relation(fields: [authorId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String   @id @default(cuid())
  tutorId   String
  studentId String
  value     Int
  comment   String?
  tutor     Profile  @relation(name:"tutor",fields: [tutorId], references: [userId])
  student   Profile  @relation(fields: [studentId], references: [userId])
  createdAt DateTime @default(now())
}